buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.9"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'

        classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
        classpath 'com.netflix.nebula:gradle-info-plugin:3.2.1'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.3.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:1.4.0"
    }
}

repositories {
    maven {
        url "http://dl.bintray.com/alfa-laboratory/maven-releases"
    }
    mavenLocal()
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'base'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'license'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'distribution'

// ==== nebula
apply plugin: 'nebula.release'
apply plugin: 'nebula.maven-publish'
apply plugin: 'nebula.source-jar'
apply plugin: 'nebula.javadoc-jar'

group = 'ru.alfabank.tests'

description = """light testing framework Akita"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
def cucumber = "1.2.4"

project.ext {
    cucumberVersion = '2.4.0'
    selenideVersion = '5.1.0'
}

dependencies {
    compile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.8'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    compile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
    compile group: 'com.codeborne', name: 'selenide', version: selenideVersion
    compile group: 'io.cucumber', name: 'cucumber-java', version: cucumberVersion
    compile group: 'io.cucumber', name: 'cucumber-core', version: cucumberVersion
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.2'
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.galenframework', name: 'galen-java-support', version: '2.3.6'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'

    testCompile "org.mockito:mockito-core:2.13.0"
    testCompile "org.mockito:mockito-inline:2.13.0"
    testCompile "com.github.tomakehurst:wiremock-standalone:2.15.0"

    compile group: 'net.masterthought', name: 'cucumber-reporting', version: "1.4.0"
//    compile 'junit:junit:4.11'
    compile "info.cukes:cucumber-junit:$cucumber"
    compile "info.cukes:cucumber-java:$cucumber"
    compile "info.cukes:cucumber-picocontainer:$cucumber"

    compile 'org.glassfish.jersey.core:jersey-client:2.25.1'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.8.7'
    compile 'org.glassfish.jersey.media:jersey-media-moxy:2.25.1'
    compile 'junit:junit-dep:4.11'
//    compile 'org.hamcrest:hamcrest-all:1.3'
//    compile ('org.seleniumhq.selenium:selenium-java:3.12.0') { exclude group: 'junit' }
//    compile 'org.seleniumhq.selenium:selenium-api:3.12.0'
    compile 'org.seleniumhq.selenium:htmlunit-driver:2.29.0'
    compile 'log4j:log4j:1.2.17'
    compile 'args4j:args4j:2.0.16'
    compile 'commons-configuration:commons-configuration:1.8'
    compile 'uk.com.robust-it:cloning:1.9.0'
    compile 'jline:jline:2.6'
    compile 'com.googlecode.java-diff-utils:diffutils:1.2.1'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-jxpath:commons-jxpath:1.3'
    compile 'org.glassfish.jersey.core:jersey-client:2.25.1'
    compile 'org.glassfish.jersey.connectors:jersey-apache-connector:2.25.1'
    compile 'net.htmlparser.jericho:jericho-html:3.3'
    compile 'edu.umass.cs.benchlab:harlib:1.1.2'
    compile group: 'org.zaproxy', name: 'zap-clientapi', version: '1.2.0'
    compile files ("lib/zap-java-api-2.6.0.jar", "lib/nessus-java-client-0.2-SNAPSHOT.jar","lib/jssylze-0.2-SNAPSHOT.jar")
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact javadocJar {
                classifier "javadoc"
            }

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

ext {
    bintrayUserName = (project.hasProperty('BINTRAY_USERNAME') ? project.findProperty('BINTRAY_USERNAME') : System.getenv()['BINTRAY_USERNAME'])
    bintrayPassword = (project.hasProperty('BINTRAY_PASSWORD') ? project.findProperty('BINTRAY_PASSWORD') : System.getenv()['BINTRAY_PASSWORD'])
    bintrayRepository = (project.hasProperty('BINTRAY_REPOSITORY') ? project.findProperty('BINTRAY_REPOSITORY') : System.getenv()['BINTRAY_REPOSITORY'])
}

bintray {
    user = bintrayUserName
    key = bintrayPassword
    publications = ['nebula']
    dryRun = false
    publish = true
    pkg {
        userOrg = 'alfa-laboratory'
        repo = 'maven-releases'
        name = 'akita'
        desc = project.description
        websiteUrl = 'https://github.com/alfa-laboratory/akita'
        issueTrackerUrl = 'https://github.com/alfa-laboratory/akita/issues'
        vcsUrl = 'https://github.com/alfa-laboratory/akita.git'
        licenses = ['Apache-2.0']
        labels = ['gradle', 'nebula']
        publicDownloadNumbers = true
        attributes = [:]
        version {
            name = project.version
            vcsTag = project.version
            attributes = [:]
        }
    }
}

test {
    maxParallelForks = 1
    ignoreFailures = false

    jvmArgs += "-Dfile.encoding=UTF-8"
    jvmArgs += "-Dbrowser=chrome"
    jvmArgs += "-Dselenide.pageLoadStrategy=none"
}

bintrayUpload.onlyIf {
    !project.version.toString().toUpperCase().endsWith("-SNAPSHOT") && !project.version.toString().toUpperCase().contains("-DEV")
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

license {
    header rootProject.file('HEADER')
    exclude ("body.json")
    exclude ("bodyWithParams.json")
    strictCheck false
}
